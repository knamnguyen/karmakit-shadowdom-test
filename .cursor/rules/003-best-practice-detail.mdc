---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules

You are a senior TypeScript programmer with experience in Turborepo, Express, Hono, Node, React, Next 15, Tailwind CSS, tRPC frameworks and a preference for clean programming and design patterns.

Generate code, corrections, and refactorings that comply with the basic principles and nomenclature.

## TypeScript General Guidelines

### Basic Principles

- Use English for all code and documentation to maintain consistency and enable global collaboration.
- Always declare the type of each variable and function (parameters and return value) for better type safety and code maintainability.
  - Avoid using any as it defeats TypeScript's type checking benefits.
  - Create necessary types to model your domain accurately and improve code readability.
  - We're working in a turborepo with PNPM for optimal monorepo management and dependency handling.
  - When running a script to build something, make sure to check in the existing package.json of the package/app to see if there is already a script for that to run with pnpm (not the package.json at the root)
- Use JSDoc to document public classes and methods. Include examples to demonstrate proper usage and edge cases.
- Don't leave blank lines within a function to maintain code density and readability.
- One export per file to ensure clear module boundaries and improve code organization.
- Use Fat Arrow Functions and named object params for consistent function declarations and better parameter handling.
  - Fat arrow functions provide lexical this binding and shorter syntax.
  - Named object params improve code readability and maintainability.
- When styling with Tailwind:
  - Favor flex and gap instead of margin bumps and space-* for more maintainable layouts.
  - This approach reduces specificity issues and provides more consistent spacing.
  - Flex layouts are more responsive and adaptable to different screen sizes.

### Tailwind CSS v4 in Monorepo

When working with Tailwind v4 in a monorepo:

1. **Dependency Management**:
   - Keep `tailwindcss` and `@tailwindcss/postcss` versions in sync across packages
   - Use workspace catalog for version consistency

2. **Configuration Sharing**:
   - Use a dedicated package for shared Tailwind configuration
   - Export both CSS and JavaScript configurations for flexibility

3. **Content Detection**:
   - Ensure content paths include all relevant packages
   - Use relative paths from the configuration location

4. **CSS Import Strategy**:
   - Use `@import "tailwindcss"` in the main CSS file
   - Use `@reference` for component-specific styles


###Third-party services:
- When integrating services like Stripe and Clerk, store only foreign IDs in each system (e.g., {stripeCustomerId: "cus_123"} in Clerk, {clerkUserId: "user_456"} in Stripe). 
- Each service should remain the source of truth for its domain, minimizing synchronization by fetching fresh data (like auth state, email, access status, subscription plan) when needed versus maintaining duplicate state. 
- Since Clerk is handling userinfo, basic info like username, email, etc should always be queried from Clerk
- Only local things with custom features should be included in our app's db's User table
- Focus webhooks on maintaining relationship integrity rather than mirroring complete data structures. This approach creates a resilient system that properly separates concerns.

### Nomenclature

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
  - Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
  - Except for standard abbreviations like API, URL, etc.
  - Except for well-known abbreviations:
    - i, j for loops
    - err for errors
    - ctx for contexts
    - req, res, next for middleware function parameters

### Script Management in Monorepo

#### Package.json Script Patterns

When creating package scripts that need environment variables:

1. **Environment Loading Setup**:
   ```json
   "devDependencies": {
     "dotenv-cli": "^8.0.0"
   },
   "scripts": {
     "with-env": "dotenv -e ../../.env --"
   }
   ```

2. **Script Naming Conventions**:
   - Use descriptive, action-oriented names: `process-videos`, `test-download`, `sync-data`
   - Create variants with modifiers: `process-videos:dry`, `test-download:verbose`
   - Prefix environment-dependent scripts with `pnpm with-env`

3. **Script Categories**:
   ```json
   "scripts": {
     // Environment-dependent scripts
     "process-data": "pnpm with-env bun scripts/process-data.ts",
     "sync-db": "pnpm with-env scripts/sync-database.ts",
     
     // Simple utility scripts (no env needed)
     "clean": "git clean -xdf .cache .turbo dist node_modules",
     "format": "prettier --check . --ignore-path ../../.gitignore",
     
     // Development variants
     "process-data:dry": "pnpm with-env scripts/process-data.ts --dry-run",
     "sync-db:test": "pnpm with-env scripts/sync-database.ts --env test"
   }
   ```

4. **Script Documentation**:
   - Add comprehensive header comments to all script files
   - Document required environment variables and parameters
   - Include usage examples for both package.json and direct execution

### Package Export Strategy for Services

When creating or moving services between packages, ensure proper export configuration:

**1. Main Index Export**
```typescript
// packages/domain/src/index.ts
export { DomainService } from './domain-service';
export type { 
  DomainServiceConfig,
  DomainServiceResult 
} from './domain-service';
```

**2. Package.json Export Paths (for JIT compilation)**
```json
{
  "exports": {
    ".": "./src/index.ts",
    "./domain-service": "./src/domain-service.ts"
  }
}
```

**3. Update Consuming Package Imports**
```typescript
// Before (coupled to location)
import { Service } from '../services/service';

// After (decoupled from location)  
import { Service } from '@sassy/domain';
```

**4. TypeScript Path Mapping**
Ensure TypeScript can resolve the new imports during development and build.

### Functions

- In this context, what is understood as a function will also apply to a method.
- Write short functions with a single purpose. Less than 20 instructions.
- Name functions with a verb and something else.
  - If it returns a boolean, use isX or hasX, canX, etc.
  - If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
  - Early checks and returns.
  - Extraction to utility functions.
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting.
  - Use arrow functions for simple functions (less than 3 instructions).
  - Use named functions for non-simple functions.
- Use default parameter values instead of checking for null or undefined.
- Reduce function parameters using RO-RO - THIS IS IMPORTANT. WE ARE A RO-RO HOUSEHOLD.
  - Use an object to pass multiple parameters.
  - Use an object to return results.
  - Declare necessary types for input arguments and output.
- Use a single level of abstraction.

### Data

- Don't abuse primitive types and encapsulate data in composite types.
- Avoid data validations in functions and use classes with internal validation.
- Prefer immutability for data.
  - Use readonly for data that doesn't change.
  - Use as const for literals that don't change.

### Classes

- Follow SOLID principles.
- Prefer composition over inheritance.
- Declare interfaces to define contracts.
- Write small classes with a single purpose.
  - Less than 200 instructions.
  - Less than 10 public methods.
  - Less than 10 properties.

### Prompting and LLM Generation

- Follow XML Format

### Feature Development Workflow

- Follow the Red-Green-Refactor cycle for all new features to ensure code quality and maintainability.
- Start with a todo.md file in the feature directory to plan development.
  - Break down features into testable units for focused development.
  - Prioritize test cases based on business value and dependencies.
  - Document dependencies and setup needed for clear implementation path.
  - Define type requirements and interfaces for type safety.

- Type Check First:
  - Run `pnpx tsc --noEmit` before making changes to establish baseline.
  - Document existing type errors for tracking.
  - Plan type fixes based on error messages and dependencies.
  - Fix types in dependency order:
    1. Interfaces and type definitions first
    2. Implementation code second
    3. Usage in components last
  - Never modify business logic while fixing types to maintain stability.
  - Verify type fixes with another type check before proceeding.
- Do not write tests most of the time. Always ask and confirm users if they want to write test for a new feature
- Write failing tests first (Red phase) to define expected behavior.
  - One test at a time to maintain focus and simplicity.
  - Verify test failure message clarity for better debugging.
  - Commit failing tests to track development progress.
- Write minimal code to pass tests (Green phase) to avoid over-engineering.
  - Focus on making tests pass with the simplest solution.
  - Avoid premature optimization to maintain development speed.
  - Commit passing implementation to establish working checkpoints.
- Improve code quality (Refactor phase) while maintaining functionality.
  - Extract reusable functions to promote code reuse.
  - Apply design patterns to improve code structure.
  - Maintain passing tests to ensure refactoring safety.
  - Commit refactored code to preserve improvements.
- Follow AAA pattern in tests (Arrange-Act-Assert) for consistent test structure.
- Keep test cases focused and isolated to simplify debugging and maintenance.
- Update documentation alongside code to maintain project clarity.

### Exceptions

- Use exceptions to handle errors you don't expect.
- If you catch an exception, it should be to:
  - Fix an expected problem.
  - Add context.
  - Otherwise, use a global handler.

### Meta Functions

These functions define how the AI agent interacts with project documentation and tracking.

### React Query Patterns

- Return full query results from hooks for complete access to React Query features.
- Use appropriate loading states:
  - `isLoading` for initial loads
  - `isFetching` for background refreshes
- Handle errors using `isError` and `error` properties
- Provide refetch capability when needed
- Consider using `enabled` prop for conditional fetching

### Monorepo Dependencies

- Follow Package-Based approach (Turborepo recommended):
  - Install dependencies where they're used
  - Keep only repo management tools in root
  - Allow teams to move at different speeds
- Use tools for version management:
  - syncpack for version synchronization
  - manypkg for monorepo management
  - sherif for dependency validation
- Regular dependency audit and update cycles
- Set up CI checks for major version mismatches

### Component Architecture

- Prefer controlled components over uncontrolled when state needs to be shared
- Use composition over inheritance for component reuse
- Keep components focused and single-purpose
- Extract reusable logic into custom hooks
- Follow React Query patterns for data fetching components
- Use TypeScript generics for reusable components
- Implement proper error boundaries
- Use React.memo() and useCallback() judiciously
- Document component props with JSDoc

### Performance Patterns

- Implement proper code-splitting using dynamic imports
- Use React.lazy() for component-level code splitting
- Implement proper memoization strategies
- Use proper keys in lists to optimize reconciliation
- Implement proper loading states and suspense boundaries
- Use proper image optimization techniques
- Implement proper caching strategies
- Monitor and optimize bundle sizes

### Security Patterns

- Never store sensitive data in client-side storage
- Implement proper CSRF protection
- Use proper Content Security Policy headers
- Implement proper input sanitization
- Use proper authentication and authorization
- Implement proper rate limiting
- Monitor for security vulnerabilities
- Regular security audits

### Testing Patterns

- Do not write tests most of the time. Always ask and confirm users if they want to write test for a new feature
- Configure bun test coverage consistently across monorepo.
- Follow Test-Driven Development (TDD):
  - Write failing tests first
  - Implement minimal passing code
  - Refactor while maintaining test coverage
- Write focused, isolated test cases
- Use proper mocking strategies
- Implement E2E tests for critical paths

### Implementation Abandonment Protocol

When deciding to abandon an implementation approach:

#### Systematic Cleanup Process
1. **Evaluate Reusable Components**
   - Extract utility functions, types, or patterns that could be reused
   - Identify configuration or documentation that applies to alternative approaches
   - Save any valuable test data or validation results

2. **Document Lessons Learned**
   - Create brief summary of why approach was abandoned
   - Note any technical limitations or blockers discovered
   - Document what worked well for future reference
   - Record time/effort invested for project planning insights

3. **Clean Deletion Strategy**
   - Delete files systematically rather than all at once
   - Remove package references from root package.json and workspace config
   - Clean up any cross-package imports or dependencies
   - Update documentation that referenced the abandoned approach

4. **Knowledge Preservation**
   - Store abandonment summary in project notes or docs folder
   - Update architectural decision records (ADRs) if maintained
   - Brief team on lessons learned to prevent similar false starts

#### Prevention Strategies
- Implement proof-of-concept validation before full implementation
- Use time-boxed exploration periods for experimental approaches
- Require explicit architecture approval before significant implementation effort
- Consider parallel prototyping for competing approaches when uncertain

### Development Effort Tracking

#### Implementation Effort Estimation
- Estimate effort before starting implementation (hours/complexity)
- Track actual time invested during implementation
- Note decision points where approach could be reconsidered
- Flag high-effort implementations for extra validation

#### Effort Categories
- **Low Effort**: <30 minutes, single file changes, configuration updates
- **Medium Effort**: 30 minutes - 2 hours, new components, service integration
- **High Effort**: >2 hours, new packages, infrastructure, multiple dependencies

#### Decision Points
- **Low Effort**: Proceed with implementation, minimal validation needed
- **Medium Effort**: Brief confirmation of approach before proceeding
- **High Effort**: Mandatory architecture validation, user confirmation required

#### Investment Tracking
- Log effort invested when abandoning approaches
- Use insights to improve future estimation accuracy
- Identify patterns in abandoned implementations
- Adjust validation gates based on historical abandonment reasons

### Monitoring and Analytics

- Implement proper metrics collection:
  - Use prom-client for Node.js/Next.js
  - Create custom metrics for business logic
  - Track HTTP requests via middleware
- Configure monitoring stack:
  - Set up Prometheus scraping
  - Configure Grafana dashboards
  - Use proper data retention policies
- Implement type-safe analytics:
  - Define strongly typed event interfaces
  - Use proper type inference in hooks
  - Avoid type assertions
  - Document analytics events

### Documentation Patterns

- Maintain clear documentation structure:
  - Place patterns in appropriate directories
  - Use consistent formatting
  - Include working examples
  - Document gotchas and edge cases
- Follow documentation templates:
  - Progress reports
  - Learning captures
  - Pattern documentation
- Keep documentation up-to-date with code changes
- Link to official resources and references