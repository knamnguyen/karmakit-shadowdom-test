interface AsyncParams {
    retries?: number;
    delay?: number;
}
declare function querySelector<E extends Element = Element>(root: Document | Element | ShadowRoot, selectors: string): E | null;
declare function querySelector<E extends Element = Element>(selectors: string): E | null;
declare function deepQuerySelector<E extends Element = Element>(root: Document | Element | ShadowRoot, selectors: string): E | null;
declare function deepQuerySelector<E extends Element = Element>(selectors: string): E | null;
declare function querySelectorAll<E extends Element = Element>(root: Document | Element | ShadowRoot, selectors: string): NodeListOf<E>;
declare function querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
declare function deepQuerySelectorAll<E extends Element = Element>(root: Document | Element | ShadowRoot, selectors: string): NodeListOf<E>;
declare function deepQuerySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
declare function shadowRootQuerySelector(root: Document | Element | ShadowRoot, selectors: string): ShadowRoot | null;
declare function shadowRootQuerySelector(selectors: string): ShadowRoot | null;
declare function asyncQuerySelector<E extends Element = Element>(root: Document | Element | ShadowRoot, selectors: string, asyncParams?: AsyncParams): Promise<E | null>;
declare function asyncQuerySelector<E extends Element = Element>(selectors: string, asyncParams?: AsyncParams): Promise<E | null>;
declare function asyncDeepQuerySelector<E extends Element = Element>(root: Document | Element | ShadowRoot, selectors: string, asyncParams?: AsyncParams): Promise<E | null>;
declare function asyncDeepQuerySelector<E extends Element = Element>(selectors: string, asyncParams?: AsyncParams): Promise<E | null>;
declare function asyncQuerySelectorAll<E extends Element = Element>(root: Document | Element | ShadowRoot, selectors: string, asyncParams?: AsyncParams): Promise<NodeListOf<E>>;
declare function asyncQuerySelectorAll<E extends Element = Element>(selectors: string, asyncParams?: AsyncParams): Promise<NodeListOf<E>>;
declare function asyncDeepQuerySelectorAll<E extends Element = Element>(root: Document | Element | ShadowRoot, selectors: string, asyncParams?: AsyncParams): Promise<NodeListOf<E>>;
declare function asyncDeepQuerySelectorAll<E extends Element = Element>(selectors: string, asyncParams?: AsyncParams): Promise<NodeListOf<E>>;
declare function asyncShadowRootQuerySelector(root: Document | Element | ShadowRoot, selectors: string, asyncParams?: AsyncParams): Promise<ShadowRoot | null>;
declare function asyncShadowRootQuerySelector(selectors: string, asyncParams?: AsyncParams): Promise<ShadowRoot | null>;
declare class AsyncSelector<T extends Document | Element | ShadowRoot> {
    constructor(asyncParams?: AsyncParams);
    constructor(root?: T | Promise<T | NodeListOf<Element>>, asyncParams?: AsyncParams);
    private _element;
    private _asyncParams;
    get element(): Promise<T | null>;
    get $(): AsyncSelector<ShadowRoot>;
    get all(): Promise<NodeListOf<Element>>;
    get asyncParams(): AsyncParams;
    eq(index: number): Promise<Element | null>;
    query(selector: string): AsyncSelector<Element>;
    deepQuery(selector: string): AsyncSelector<Element>;
}
export { querySelector, deepQuerySelector, querySelectorAll, deepQuerySelectorAll, shadowRootQuerySelector, asyncQuerySelector, asyncDeepQuerySelector, asyncQuerySelectorAll, asyncDeepQuerySelectorAll, asyncShadowRootQuerySelector, AsyncSelector };
export type { AsyncParams };
